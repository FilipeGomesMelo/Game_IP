import pygame as pg
import math

# initialize Pygame
pg.init()

######################################################################################################
# classe responsavel pelos prejeteis do jogo, no momento somente o jogador consegue criar projeteis  #
######################################################################################################
class projectile(object):
    def __init__(self, x, y, width, height, window, WINDOW_WIDTH, WINDOW_HEIGHT, direction):
        # define se a bala existe ou não
        self.existe = True

        # posição x e y da bala
        self.x = x
        self.y = y

        # lagura e altura da bala
        self.width = width
        self.height = height

        # tela em que a bala sera desenhada
        self.win = window
        self.WINDOW_WIDTH = WINDOW_WIDTH
        self.WINDOW_HEIGHT = WINDOW_HEIGHT

        # vetor velocidade da bala
        self.vel = 0.5

        # sprite da bala
        self.img = pg.transform.scale(pg.image.load('images/bullet2.png'), (self.width,self.height))

        # direção é a chave para os sen e cos dessa bala
        self.direction = direction
        # angles é um dicionario com os senos e cosenos de cada angulo de 0 a 365 de 5 em 5
        self.angles = {0: [0.0, 1.0], 1: [0.017, 1.0], 2: [0.035, 0.999], 3: [0.052, 0.999], 4: [0.07, 0.998], 5: [0.087, 0.996], 6: [0.105, 0.995], 7: [0.122, 0.993], 8: [0.139, 0.99], 9: [0.156, 0.988], 10: [0.174, 0.985], 11: [0.191, 0.982], 12: [0.208, 0.978], 13: [0.225, 0.974], 14: [0.242, 0.97], 15: [0.259, 0.966], 16: [0.276, 0.961], 17: [0.292, 0.956], 18: [0.309, 0.951], 19: [0.326, 0.946], 20: [0.342, 0.94], 21: [0.358, 0.934], 22: [0.375, 0.927], 23: [0.391, 0.921], 24: [0.407, 0.914], 25: [0.423, 0.906], 26: [0.438, 0.899], 27: [0.454, 0.891], 28: [0.469, 0.883], 29: [0.485, 0.875], 30: [0.5, 0.866], 31: [0.515, 0.857], 32: [0.53, 0.848], 33: [0.545, 0.839], 34: [0.559, 0.829], 35: [0.574, 0.819], 36: [0.588, 0.809], 37: [0.602, 0.799], 38: [0.616, 0.788], 39: [0.629, 0.777], 40: [0.643, 0.766], 41: [0.656, 0.755], 42: [0.669, 0.743], 43: [0.682, 0.731], 44: [0.695, 0.719], 45: [0.707, 0.707], 46: [0.719, 0.695], 47: [0.731, 0.682], 48: [0.743, 0.669], 49: [0.755, 0.656], 50: [0.766, 0.643], 51: [0.777, 0.629], 52: [0.788, 0.616], 53: [0.799, 0.602], 54: [0.809, 0.588], 55: [0.819, 0.574], 56: [0.829, 0.559], 57: [0.839, 0.545], 58: [0.848, 0.53], 59: [0.857, 0.515], 60: [0.866, 0.5], 61: [0.875, 0.485], 62: [0.883, 0.469], 63: [0.891, 0.454], 64: [0.899, 0.438], 65: [0.906, 0.423], 66: [0.914, 0.407], 67: [0.921, 0.391], 68: [0.927, 0.375], 69: [0.934, 0.358], 70: [0.94, 0.342], 71: [0.946, 0.326], 72: [0.951, 0.309], 73: [0.956, 0.292], 74: [0.961, 0.276], 75: [0.966, 0.259], 76: [0.97, 0.242], 77: [0.974, 0.225], 78: [0.978, 0.208], 79: [0.982, 0.191], 80: [0.985, 0.174], 81: [0.988, 0.156], 82: [0.99, 0.139], 83: [0.993, 0.122], 84: [0.995, 0.105], 85: [0.996, 0.087], 86: [0.998, 0.07], 87: [0.999, 0.052], 88: [0.999, 0.035], 89: [1.0, 0.017], 90: [1.0, 0.0], 91: [1.0, -0.017], 92: [0.999, -0.035], 93: [0.999, -0.052], 94: [0.998, -0.07], 95: [0.996, -0.087], 96: [0.995, -0.105], 97: [0.993, -0.122], 98: [0.99, -0.139], 99: [0.988, -0.156], 100: [0.985, -0.174], 101: [0.982, -0.191], 102: [0.978, -0.208], 103: [0.974, -0.225], 104: [0.97, -0.242], 105: [0.966, -0.259], 106: [0.961, -0.276], 107: [0.956, -0.292], 108: [0.951, -0.309], 109: [0.946, -0.326], 110: [0.94, -0.342], 111: [0.934, -0.358], 112: [0.927, -0.375], 113: [0.921, -0.391], 114: [0.914, -0.407], 115: [0.906, -0.423], 116: [0.899, -0.438], 117: [0.891, -0.454], 118: [0.883, -0.469], 119: [0.875, -0.485], 120: [0.866, -0.5], 121: [0.857, -0.515], 122: [0.848, -0.53], 123: [0.839, -0.545], 124: [0.829, -0.559], 125: [0.819, -0.574], 126: [0.809, -0.588], 127: [0.799, -0.602], 128: [0.788, -0.616], 129: [0.777, -0.629], 130: [0.766, -0.643], 131: [0.755, -0.656], 132: [0.743, -0.669], 133: [0.731, -0.682], 134: [0.719, -0.695], 135: [0.707, -0.707], 136: [0.695, -0.719], 137: [0.682, -0.731], 138: [0.669, -0.743], 139: [0.656, -0.755], 140: [0.643, -0.766], 141: [0.629, -0.777], 142: [0.616, -0.788], 143: [0.602, -0.799], 144: [0.588, -0.809], 145: [0.574, -0.819], 146: [0.559, -0.829], 147: [0.545, -0.839], 148: [0.53, -0.848], 149: [0.515, -0.857], 150: [0.5, -0.866], 151: [0.485, -0.875], 152: [0.469, -0.883], 153: [0.454, -0.891], 154: [0.438, -0.899], 155: [0.423, -0.906], 156: [0.407, -0.914], 157: [0.391, -0.921], 158: [0.375, -0.927], 159: [0.358, -0.934], 160: [0.342, -0.94], 161: [0.326, -0.946], 162: [0.309, -0.951], 163: [0.292, -0.956], 164: [0.276, -0.961], 165: [0.259, -0.966], 166: [0.242, -0.97], 167: [0.225, -0.974], 168: [0.208, -0.978], 169: [0.191, -0.982], 170: [0.174, -0.985], 171: [0.156, -0.988], 172: [0.139, -0.99], 173: [0.122, -0.993], 174: [0.105, -0.995], 175: [0.087, -0.996], 176: [0.07, -0.998], 177: [0.052, -0.999], 178: [0.035, -0.999], 179: [0.017, -1.0], 180: [0.0, -1.0], 181: [-0.017, -1.0], 182: [-0.035, -0.999], 183: [-0.052, -0.999], 184: [-0.07, -0.998], 185: [-0.087, -0.996], 186: [-0.105, -0.995], 187: [-0.122, -0.993], 188: [-0.139, -0.99], 189: [-0.156, -0.988], 190: [-0.174, -0.985], 191: [-0.191, -0.982], 192: [-0.208, -0.978], 193: [-0.225, -0.974], 194: [-0.242, -0.97], 195: [-0.259, -0.966], 196: [-0.276, -0.961], 197: [-0.292, -0.956], 198: [-0.309, -0.951], 199: [-0.326, -0.946], 200: [-0.342, -0.94], 201: [-0.358, -0.934], 202: [-0.375, -0.927], 203: [-0.391, -0.921], 204: [-0.407, -0.914], 205: [-0.423, -0.906], 206: [-0.438, -0.899], 207: [-0.454, -0.891], 208: [-0.469, -0.883], 209: [-0.485, -0.875], 210: [-0.5, -0.866], 211: [-0.515, -0.857], 212: [-0.53, -0.848], 213: [-0.545, -0.839], 214: [-0.559, -0.829], 215: [-0.574, -0.819], 216: [-0.588, -0.809], 217: [-0.602, -0.799], 218: [-0.616, -0.788], 219: [-0.629, -0.777], 220: [-0.643, -0.766], 221: [-0.656, -0.755], 222: [-0.669, -0.743], 223: [-0.682, -0.731], 224: [-0.695, -0.719], 225: [-0.707, -0.707], 226: [-0.719, -0.695], 227: [-0.731, -0.682], 228: [-0.743, -0.669], 229: [-0.755, -0.656], 230: [-0.766, -0.643], 231: [-0.777, -0.629], 232: [-0.788, -0.616], 233: [-0.799, -0.602], 234: [-0.809, -0.588], 235: [-0.819, -0.574], 236: [-0.829, -0.559], 237: [-0.839, -0.545], 238: [-0.848, -0.53], 239: [-0.857, -0.515], 240: [-0.866, -0.5], 241: [-0.875, -0.485], 242: [-0.883, -0.469], 243: [-0.891, -0.454], 244: [-0.899, -0.438], 245: [-0.906, -0.423], 246: [-0.914, -0.407], 247: [-0.921, -0.391], 248: [-0.927, -0.375], 249: [-0.934, -0.358], 250: [-0.94, -0.342], 251: [-0.946, -0.326], 252: [-0.951, -0.309], 253: [-0.956, -0.292], 254: [-0.961, -0.276], 255: [-0.966, -0.259], 256: [-0.97, -0.242], 257: [-0.974, -0.225], 258: [-0.978, -0.208], 259: [-0.982, -0.191], 260: [-0.985, -0.174], 261: [-0.988, -0.156], 262: [-0.99, -0.139], 263: [-0.993, -0.122], 264: [-0.995, -0.105], 265: [-0.996, -0.087], 266: [-0.998, -0.07], 267: [-0.999, -0.052], 268: [-0.999, -0.035], 269: [-1.0, -0.017], 270: [-1.0, -0.0], 271: [-1.0, 0.017], 272: [-0.999, 0.035], 273: [-0.999, 0.052], 274: [-0.998, 0.07], 275: [-0.996, 0.087], 276: [-0.995, 0.105], 277: [-0.993, 0.122], 278: [-0.99, 0.139], 279: [-0.988, 0.156], 280: [-0.985, 0.174], 281: [-0.982, 0.191], 282: [-0.978, 0.208], 283: [-0.974, 0.225], 284: [-0.97, 0.242], 285: [-0.966, 0.259], 286: [-0.961, 0.276], 287: [-0.956, 0.292], 288: [-0.951, 0.309], 289: [-0.946, 0.326], 290: [-0.94, 0.342], 291: [-0.934, 0.358], 292: [-0.927, 0.375], 293: [-0.921, 0.391], 294: [-0.914, 0.407], 295: [-0.906, 0.423], 296: [-0.899, 0.438], 297: [-0.891, 0.454], 298: [-0.883, 0.469], 299: [-0.875, 0.485], 300: [-0.866, 0.5], 301: [-0.857, 0.515], 302: [-0.848, 0.53], 303: [-0.839, 0.545], 304: [-0.829, 0.559], 305: [-0.819, 0.574], 306: [-0.809, 0.588], 307: [-0.799, 0.602], 308: [-0.788, 0.616], 309: [-0.777, 0.629], 310: [-0.766, 0.643], 311: [-0.755, 0.656], 312: [-0.743, 0.669], 313: [-0.731, 0.682], 314: [-0.719, 0.695], 315: [-0.707, 0.707], 316: [-0.695, 0.719], 317: [-0.682, 0.731], 318: [-0.669, 0.743], 319: [-0.656, 0.755], 320: [-0.643, 0.766], 321: [-0.629, 0.777], 322: [-0.616, 0.788], 323: [-0.602, 0.799], 324: [-0.588, 0.809], 325: [-0.574, 0.819], 326: [-0.559, 0.829], 327: [-0.545, 0.839], 328: [-0.53, 0.848], 329: [-0.515, 0.857], 330: [-0.5, 0.866], 331: [-0.485, 0.875], 332: [-0.469, 0.883], 333: [-0.454, 0.891], 334: [-0.438, 0.899], 335: [-0.423, 0.906], 336: [-0.407, 0.914], 337: [-0.391, 0.921], 338: [-0.375, 0.927], 339: [-0.358, 0.934], 340: [-0.342, 0.94], 341: [-0.326, 0.946], 342: [-0.309, 0.951], 343: [-0.292, 0.956], 344: [-0.276, 0.961], 345: [-0.259, 0.966], 346: [-0.242, 0.97], 347: [-0.225, 0.974], 348: [-0.208, 0.978], 349: [-0.191, 0.982], 350: [-0.174, 0.985], 351: [-0.156, 0.988], 352: [-0.139, 0.99], 353: [-0.122, 0.993], 354: [-0.105, 0.995], 355: [-0.087, 0.996], 356: [-0.07, 0.998], 357: [-0.052, 0.999], 358: [-0.035, 0.999], 359: [-0.017, 1.0]}
    
    def update(self, dt, mapa):
        # para permitir criar balas em novos angulos que não fazem parte do dicionário
        if self.direction not in self.angles:
            angle = self.direction*math.pi/180
            # adiciona esse novo angulo ao dicionario para só chamar math.sin e math.cos uma vez por nova bala
            self.angles[self.direction] = [round(math.sin(angle),3), round(math.cos(angle),3)]

        # calcula a velocidade x e y com base nos senos e cosenos (eixo y é invertido no pygame, multiplicamos por -1)
        speedX = self.vel*self.angles[self.direction][1]*dt
        speedY = -self.vel*self.angles[self.direction][0]*dt


        # calcula a nova posição da bala   
        self.x += speedX
        self.y += speedY


        if not(0 < self.x < self.WINDOW_WIDTH and 0 < self.y < self.WINDOW_HEIGHT) or not(0 < self.x + self.width < self.WINDOW_WIDTH and 0 < self.y < self.WINDOW_HEIGHT):
            self.existe = False
        if self.existe:
            if mapa.tiles[mapa.map[int(self.y//32)%21][int(self.x//32)%21]]['type'] == 'parede' or mapa.tiles[mapa.map[int((self.y)//32)%21][int((self.x+self.width)//32)%21]]['type'] == 'parede' or mapa.tiles[mapa.map[int((self.y+self.height)//32)%21][int((self.x+self.width)//32)%21]]['type'] == 'parede' or mapa.tiles[mapa.map[int((self.y+self.height)//32)%21][int((self.x)//32)%21]]['type'] == 'parede':
                self.existe = False

    # desenha essa bala
    def draw(self):
        self.win.blit(self.img, (self.x, self.y))
